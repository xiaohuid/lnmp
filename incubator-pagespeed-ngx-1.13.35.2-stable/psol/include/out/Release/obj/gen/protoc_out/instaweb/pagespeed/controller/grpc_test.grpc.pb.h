// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pagespeed/controller/grpc_test.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: cheesy@google.com (Steve Hill)
//
#ifndef GRPC_pagespeed_2fcontroller_2fgrpc_5ftest_2eproto__INCLUDED
#define GRPC_pagespeed_2fcontroller_2fgrpc_5ftest_2eproto__INCLUDED

#include "pagespeed/controller/grpc_test.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace net_instaweb {


namespace grpc {

// Test service for user in rpc_handler_test.cc.
class GrpcTestService final {
 public:
  static constexpr char const* service_full_name() {
    return "net_instaweb.GrpcTestService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Simple streaming rpc target for testing.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>> Test(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>>(TestRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>> AsyncTest(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>>(AsyncTestRaw(context, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>* TestRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>* AsyncTestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>> Test(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>>(TestRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>> AsyncTest(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>>(AsyncTestRaw(context, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>* TestRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::net_instaweb::TestRequest, ::net_instaweb::TestResponse>* AsyncTestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_Test_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Simple streaming rpc target for testing.
    virtual ::grpc::Status Test(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::net_instaweb::TestResponse, ::net_instaweb::TestRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Test() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::net_instaweb::TestResponse, ::net_instaweb::TestRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTest(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::net_instaweb::TestResponse, ::net_instaweb::TestRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Test<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Test() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::net_instaweb::TestResponse, ::net_instaweb::TestRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

}  // namespace grpc

}  // namespace net_instaweb


#endif  // GRPC_pagespeed_2fcontroller_2fgrpc_5ftest_2eproto__INCLUDED
