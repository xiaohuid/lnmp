// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/flush_early.proto

#ifndef PROTOBUF_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto__INCLUDED
#define PROTOBUF_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "pagespeed/kernel/http/http.pb.h"
// @@protoc_insertion_point(includes)

namespace net_instaweb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();

class FlushEarlyInfo;

// ===================================================================

class FlushEarlyInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:net_instaweb.FlushEarlyInfo) */ {
 public:
  FlushEarlyInfo();
  virtual ~FlushEarlyInfo();

  FlushEarlyInfo(const FlushEarlyInfo& from);

  inline FlushEarlyInfo& operator=(const FlushEarlyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const FlushEarlyInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlushEarlyInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FlushEarlyInfo* other);

  // implements Message ----------------------------------------------

  inline FlushEarlyInfo* New() const { return New(NULL); }

  FlushEarlyInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlushEarlyInfo& from);
  void MergeFrom(const FlushEarlyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlushEarlyInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dns_prefetch_domains = 5;
  int dns_prefetch_domains_size() const;
  void clear_dns_prefetch_domains();
  static const int kDnsPrefetchDomainsFieldNumber = 5;
  const ::std::string& dns_prefetch_domains(int index) const;
  ::std::string* mutable_dns_prefetch_domains(int index);
  void set_dns_prefetch_domains(int index, const ::std::string& value);
  void set_dns_prefetch_domains(int index, const char* value);
  void set_dns_prefetch_domains(int index, const char* value, size_t size);
  ::std::string* add_dns_prefetch_domains();
  void add_dns_prefetch_domains(const ::std::string& value);
  void add_dns_prefetch_domains(const char* value);
  void add_dns_prefetch_domains(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dns_prefetch_domains() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dns_prefetch_domains();

  // optional int32 total_dns_prefetch_domains = 6;
  bool has_total_dns_prefetch_domains() const;
  void clear_total_dns_prefetch_domains();
  static const int kTotalDnsPrefetchDomainsFieldNumber = 6;
  ::google::protobuf::int32 total_dns_prefetch_domains() const;
  void set_total_dns_prefetch_domains(::google::protobuf::int32 value);

  // optional int32 total_dns_prefetch_domains_previous = 7;
  bool has_total_dns_prefetch_domains_previous() const;
  void clear_total_dns_prefetch_domains_previous();
  static const int kTotalDnsPrefetchDomainsPreviousFieldNumber = 7;
  ::google::protobuf::int32 total_dns_prefetch_domains_previous() const;
  void set_total_dns_prefetch_domains_previous(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:net_instaweb.FlushEarlyInfo)
 private:
  inline void set_has_total_dns_prefetch_domains();
  inline void clear_has_total_dns_prefetch_domains();
  inline void set_has_total_dns_prefetch_domains_previous();
  inline void clear_has_total_dns_prefetch_domains_previous();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dns_prefetch_domains_;
  ::google::protobuf::int32 total_dns_prefetch_domains_;
  ::google::protobuf::int32 total_dns_prefetch_domains_previous_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  #endif
  friend void protobuf_AssignDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  friend void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();

  void InitAsDefaultInstance();
  static FlushEarlyInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FlushEarlyInfo

// repeated string dns_prefetch_domains = 5;
inline int FlushEarlyInfo::dns_prefetch_domains_size() const {
  return dns_prefetch_domains_.size();
}
inline void FlushEarlyInfo::clear_dns_prefetch_domains() {
  dns_prefetch_domains_.Clear();
}
inline const ::std::string& FlushEarlyInfo::dns_prefetch_domains(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_.Get(index);
}
inline ::std::string* FlushEarlyInfo::mutable_dns_prefetch_domains(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_.Mutable(index);
}
inline void FlushEarlyInfo::set_dns_prefetch_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  dns_prefetch_domains_.Mutable(index)->assign(value);
}
inline void FlushEarlyInfo::set_dns_prefetch_domains(int index, const char* value) {
  dns_prefetch_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
inline void FlushEarlyInfo::set_dns_prefetch_domains(int index, const char* value, size_t size) {
  dns_prefetch_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
inline ::std::string* FlushEarlyInfo::add_dns_prefetch_domains() {
  // @@protoc_insertion_point(field_add_mutable:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_.Add();
}
inline void FlushEarlyInfo::add_dns_prefetch_domains(const ::std::string& value) {
  dns_prefetch_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
inline void FlushEarlyInfo::add_dns_prefetch_domains(const char* value) {
  dns_prefetch_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
inline void FlushEarlyInfo::add_dns_prefetch_domains(const char* value, size_t size) {
  dns_prefetch_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlushEarlyInfo::dns_prefetch_domains() const {
  // @@protoc_insertion_point(field_list:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlushEarlyInfo::mutable_dns_prefetch_domains() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return &dns_prefetch_domains_;
}

// optional int32 total_dns_prefetch_domains = 6;
inline bool FlushEarlyInfo::has_total_dns_prefetch_domains() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushEarlyInfo::set_has_total_dns_prefetch_domains() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushEarlyInfo::clear_has_total_dns_prefetch_domains() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushEarlyInfo::clear_total_dns_prefetch_domains() {
  total_dns_prefetch_domains_ = 0;
  clear_has_total_dns_prefetch_domains();
}
inline ::google::protobuf::int32 FlushEarlyInfo::total_dns_prefetch_domains() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains)
  return total_dns_prefetch_domains_;
}
inline void FlushEarlyInfo::set_total_dns_prefetch_domains(::google::protobuf::int32 value) {
  set_has_total_dns_prefetch_domains();
  total_dns_prefetch_domains_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains)
}

// optional int32 total_dns_prefetch_domains_previous = 7;
inline bool FlushEarlyInfo::has_total_dns_prefetch_domains_previous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushEarlyInfo::set_has_total_dns_prefetch_domains_previous() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlushEarlyInfo::clear_has_total_dns_prefetch_domains_previous() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlushEarlyInfo::clear_total_dns_prefetch_domains_previous() {
  total_dns_prefetch_domains_previous_ = 0;
  clear_has_total_dns_prefetch_domains_previous();
}
inline ::google::protobuf::int32 FlushEarlyInfo::total_dns_prefetch_domains_previous() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains_previous)
  return total_dns_prefetch_domains_previous_;
}
inline void FlushEarlyInfo::set_total_dns_prefetch_domains_previous(::google::protobuf::int32 value) {
  set_has_total_dns_prefetch_domains_previous();
  total_dns_prefetch_domains_previous_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains_previous)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto__INCLUDED
